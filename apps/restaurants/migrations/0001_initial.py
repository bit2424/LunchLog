# Generated by Django 4.2.24 on 2025-09-20 08:29

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Cuisine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Cuisine type name (e.g., italian, japanese, indian)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly cuisine name", unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Restaurant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "place_id",
                    models.CharField(
                        help_text="Google Places API place_id",
                        max_length=255,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(help_text="Restaurant name", max_length=255)),
                ("address", models.TextField(help_text="Full formatted address")),
                ("city", models.CharField(help_text="City name", max_length=100)),
                (
                    "lat",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Latitude coordinate",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "lng",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Longitude coordinate",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "price_level",
                    models.IntegerField(
                        blank=True,
                        help_text="Price level from Google Places (0-4, where 0=free, 4=very expensive)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Average rating from Google Places (0.00-5.00)",
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("5.00")),
                        ],
                    ),
                ),
                (
                    "ratings_count",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of reviews on Google Places",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "google_types",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Raw Google Places types for reference",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_synced_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time this restaurant data was synced from Google Places",
                        null=True,
                    ),
                ),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Sync"),
                            ("synced", "Successfully Synced"),
                            ("failed", "Sync Failed"),
                            ("stale", "Data is Stale"),
                        ],
                        default="pending",
                        help_text="Status of Google Places sync",
                        max_length=20,
                    ),
                ),
                (
                    "cuisines",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Cuisine types associated with this restaurant",
                        related_name="restaurants",
                        to="restaurants.cuisine",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["place_id"], name="restaurant_place_id_idx"),
                    models.Index(fields=["city"], name="restaurant_city_idx"),
                    models.Index(
                        fields=["sync_status"], name="restaurant_sync_status_idx"
                    ),
                    models.Index(
                        fields=["last_synced_at"], name="restaurant_last_sync_idx"
                    ),
                ],
            },
        ),
    ]
